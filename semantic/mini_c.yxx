%define parse.error verbose
%locations
%{
#include <cstdio>
#include <cmath>
#include <string>
#include <cstdarg>
#include "ast.hpp"
#include "val_type.hpp"
#include "../utility/utility.hpp"
#include "../lexical/mini_c.lex.hpp"
#include "../object/generator.hpp"
using namespace std;
#define YYSTYPE ValueType
extern int yylineno;
extern int yyleng;
extern char *yytext;
extern FILE *yyin;
void yyerror(const char* fmt, ...);
%}

/* %union { */
/* 	int    type_int; */
/* 	float  type_float; */ /* 	char   type_Identifier[32]; */ /* 	struct node *ptr; */
/* }; */

%define api.value.type {ValueType}


//  %type 定义非终结符的语义值类型
%type  <astnode> program ExtDefList ExtDef Specifier FuncDec StmtBlk ParamList VarDec ParamDec Stmt StmList Def VariableList Exp Args InitList

//% token 定义终结符的语义值类型
%token <literal_int> LiteralInteger              //指定INT的语义值是type_int，有词法分析得到的数值
%token <identifier> Identifier OperatorRelation IdentifierType  //指定Identifier,RELOP 的语义值是type_Identifier，有词法分析得到的标识符字符串
%token <literal_float> LiteralFloat
%token <literal_string> LiteralString LiteralChar
%token <identifier> LiteralNullptr
%token ParLeft ParRight BlockLeft BlockRight Semicolon Comma   //用bison对该文件编译时，带参数-d，生成的exp.tab.h中给这些单词进行编码，可在lex.l中包含parser.tab.h使用这些单词种类码
%token OperatorPlus OperatorMinus OperatorMul OperatorDiv
%token OperatorAssign OperatorAnd OperatorOr OperatorNot
%token CondIf CondElse LoopWhile Return
%token OperatorAddr OperatorDeref OperatorMember
%token OperatorAccessL OperatorAccessR
%token AsArray AsPointer
%token LoopBreak LoopContinue

%nonassoc ParLeft ParRight
%left OperatorAssign
%nonassoc InitializerList
%left OperatorOr
%left OperatorAnd
%left OperatorRelation
%left OperatorPlus OperatorMinus
%left OperatorMul OperatorDiv
%left OperatorMember OperatorAccess OperatorAccessL OperatorAccessR
%right OperatorUnaryMinus OperatorNot OperatorAddr OperatorDeref

%nonassoc CondIfTrue
%nonassoc CondElse

%%

program:
    ExtDefList {
        $1->recursive_print(0);
        /* semantic_Analysis0($1); */
        Generator GG;
        NodeOperator($1, GG, nullptr, nullptr);
        GG.dump_intercode();
    }
    ; 

//每一个EXTDEFLIST的结点，其第1棵子树对应一个外部变量声明或函数
ExtDefList:
    {$$=NULL;}
    | ExtDef ExtDefList {
        $$=new ASTNode(TYPE_MASTER_LIST,$1,$2,NULL,yylineno);
    }
    ;

ExtDef:
    Specifier VariableList Semicolon {
        $$=new ASTNode(TYPE_GLOBAL_VAR,$1,$2,NULL,yylineno);
    }
    | Specifier FuncDec Semicolon {
        $$=new ASTNode(TYPE_FUNC_DECL,$1,$2,NULL,yylineno);
    }
    | Specifier FuncDec StmtBlk {
        $$=new ASTNode(TYPE_FUNC_DEF,$1,$2,$3,yylineno);
    }
    | error Semicolon {$$=NULL;}
    ;

Specifier: IdentifierType { $$=new ASTNode(TYPE_TYPESPEC,NULL,NULL,NULL,yylineno);
        $$->data.identifier = string($1);
    }
    | AsArray ParLeft LiteralInteger ParRight Specifier {
        $$=new ASTNode(TYPE_COMPLEX, $5, NULL, NULL, yylineno);
        $$->data.identifier = string("array");
        $$->data.literal_int = $3;
    }
    | AsPointer Specifier {
        $$=new ASTNode(TYPE_COMPLEX, $2, NULL, NULL, yylineno);
        $$->data.identifier = string("pointer");
    }
    ;

VariableList:
    VarDec {$$=$1;}
    | VarDec OperatorAssign Exp {
        $$=new ASTNode(TYPE_INITIALIZER,$1,$3,NULL,yylineno);
    }
    | VarDec Comma VariableList {
        $$=new ASTNode(TYPE_VAR_DECLIST,$1,$3,NULL,yylineno);
    }
    | VarDec OperatorAssign Exp Comma VariableList {
        $$=new ASTNode(TYPE_INITIALIZER,$1,$3,$5,yylineno);
    }
    ;

VarDec: Identifier {
        $$=new ASTNode(TYPE_VARNAME,NULL,NULL,NULL,yylineno);
        $$->data.identifier = string($1);
    }
    ;

FuncDec:
    Identifier ParLeft ParamList ParRight {
        $$=new ASTNode(TYPE_FUNC_PROTO,$3,NULL,NULL,yylineno);
        $$->data.identifier = string($1);
    }
    | Identifier ParLeft ParRight {
        $$=new ASTNode(TYPE_FUNC_PROTO,NULL,NULL,NULL,yylineno);
        $$->data.identifier = string($1);
    }
    ;

ParamList: ParamDec {
        $$=new ASTNode(TYPE_PARAM_LIST,$1,NULL,NULL,yylineno);
    }
    | ParamDec Comma ParamList {
        $$=new ASTNode(TYPE_PARAM_LIST,$1,$3,NULL,yylineno);
    }
    ;

ParamDec: Specifier VarDec {
        $$=new ASTNode(TYPE_PARAM,$1,$2,NULL,yylineno);
    }
    ;

StmtBlk: BlockLeft StmList BlockRight {
        $$=new ASTNode(TYPE_STMTBLK, $2, NULL, NULL, yylineno);
    }
    ;

StmList: {$$=NULL;}  
    | Stmt StmList {
        $$=new ASTNode(TYPE_STMTLIST,$1,$2,NULL,yylineno);
    }
    | Def StmList {
        $$=new ASTNode(TYPE_STMTLIST,$1,$2,NULL,yylineno);
    }
    ;

Stmt:
    Exp Semicolon {
        $$=new ASTNode(TYPE_EXPR,$1,NULL,NULL,yylineno);
    }
    | StmtBlk {$$=$1;}
    | LoopBreak Semicolon {
        $$=new ASTNode(TYPE_BREAK, NULL, NULL, NULL, yylineno);
    }
    | LoopContinue Semicolon {
        $$=new ASTNode(TYPE_CONTINUE, NULL, NULL, NULL, yylineno);
    }
    | Return Exp Semicolon {
        $$=new ASTNode(TYPE_RETURN,$2,NULL,NULL,yylineno);
    }
    | CondIf ParLeft Exp ParRight Stmt %prec CondIfTrue {
        $$=new ASTNode(TYPE_IFTRUE,$3,$5,NULL,yylineno);
    }
    | CondIf ParLeft Exp ParRight Stmt CondElse Stmt {
        $$=new ASTNode(TYPE_IF,$3,$5,$7,yylineno);
    }
    | LoopWhile ParLeft Exp ParRight Stmt {
        $$=new ASTNode(TYPE_WHILE,$3,$5,NULL,yylineno);
    }
    ;
  
/*NO NEED..*/
/* DefList: {$$=NULL; } */
/*         | Def DefList {$$=new ASTNode(DEF_LIST,$1,$2,NULL,yylineno);} */
/*         ; */

Def: Specifier VariableList Semicolon {
        $$=new ASTNode(TYPE_VARDEF,$1,$2,NULL,yylineno);
    }
    ;

InitList: Exp Comma InitList {
        $$=new ASTNode(TYPE_INITLIST, $1, $3, NULL, yylineno);
    }
    | Exp {
        $$ = $1;
    }

Exp:
    Exp OperatorAssign Exp {
        $$=new ASTNode(TYPE_OPERATOR,$1,$3,NULL,yylineno);
        $$->data.identifier = string("assign");
    }
    | Exp OperatorAnd Exp {
        $$=new ASTNode(TYPE_OPERATOR,$1,$3,NULL,yylineno);
        $$->data.identifier = string("and");
    }
    | Exp OperatorOr Exp {
        $$=new ASTNode(TYPE_OPERATOR,$1,$3,NULL,yylineno);
        $$->data.identifier = string("or");
    }
    | Exp OperatorRelation Exp {
        $$=new ASTNode(TYPE_OPERATOR,$1,$3,NULL,yylineno);
        $$->data.identifier = string($2);
    }
    | Exp OperatorPlus Exp {
        $$=new ASTNode(TYPE_OPERATOR,$1,$3,NULL,yylineno);
        $$->data.identifier = string("plus");
    }
    | Exp OperatorMinus Exp {
        $$=new ASTNode(TYPE_OPERATOR,$1,$3,NULL,yylineno);
        $$->data.identifier = string("minus");
    }
    | Exp OperatorMul Exp {
        $$=new ASTNode(TYPE_OPERATOR,$1,$3,NULL,yylineno);
        $$->data.identifier = string("multiply");
    }
    | Exp OperatorDiv Exp {
        $$=new ASTNode(TYPE_OPERATOR,$1,$3,NULL,yylineno);
        $$->data.identifier = string("divide");
    }
    | ParLeft Exp ParRight {$$=$2;}
    | OperatorMinus Exp %prec OperatorUnaryMinus {
        $$=new ASTNode(TYPE_OPERATOR,$2,NULL,NULL,yylineno);
        $$->data.identifier = string("negate");
    }
    | OperatorNot Exp {
        $$=new ASTNode(TYPE_OPERATOR,$2,NULL,NULL,yylineno);
        $$->data.identifier = string("not");
    }
    | OperatorDeref ParLeft Exp ParRight {
        $$=new ASTNode(TYPE_OPERATOR,$3,NULL,NULL,yylineno);
        $$->data.identifier = string("dereference");
    }
    | OperatorAddr ParLeft Exp ParRight {
        $$=new ASTNode(TYPE_OPERATOR,$3,NULL,NULL,yylineno);
        $$->data.identifier = string("address");
    }
    | Exp OperatorMember Identifier {
        $$=new ASTNode(TYPE_OPERATOR,$1,NULL,NULL,yylineno);
        $$->data.identifier = string("member");
        $$->data.literal_string = string($3);
    }
    | Exp OperatorAccessL Exp OperatorAccessR %prec OperatorAccess {
        $$=new ASTNode(TYPE_ACCESS,$1,$3,NULL,yylineno);
    }
    | Exp ParLeft Args ParRight {
        $$=new ASTNode(TYPE_CALL,$1,$3,NULL,yylineno);
    }
    | Exp ParLeft ParRight {
        $$=new ASTNode(TYPE_CALL,$1,NULL,NULL,yylineno);
    }
    | OperatorAccessL InitList OperatorAccessR  %prec InitializerList {
        $$=$2;
    }
    | Identifier {
        $$=new ASTNode(TYPE_IDENTIFIER,NULL,NULL,NULL,yylineno);
        $$->data.identifier = string($1);
    }
    | LiteralInteger {
        $$=new ASTNode(TYPE_LITERAL_INTEGER,NULL,NULL,NULL,yylineno);
        $$->data.literal_int=$1;
    }
    | LiteralFloat {
        $$=new ASTNode(TYPE_LITERAL_FLOAT,NULL,NULL,NULL,yylineno);
        $$->data.literal_float=$1;
    }
    | LiteralString {
        $$=new ASTNode(TYPE_LITERAL_STRING,NULL,NULL,NULL,yylineno);
        $$->data.literal_string=trim_string_quotes(string($1));
    }
    | LiteralChar {
        $$=new ASTNode(TYPE_LITERAL_INTEGER,NULL,NULL,NULL,yylineno);
        $$->data.literal_int=extract_from_char_string($1);
    }
    | LiteralNullptr {
        $$=new ASTNode(TYPE_NULLPTR, NULL, NULL, NULL, yylineno);
    }
    ;

Args: Exp Comma Args {
        $$=new ASTNode(TYPE_ARGLIST,$1,$3,NULL,yylineno);
    }
    | Exp {
        $$=new ASTNode(TYPE_ARGLIST,$1,NULL,NULL,yylineno);
    }
    ;

%%

void yyerror(const char* fmt, ...)
{
    va_list ap;
    va_start(ap, fmt);
    fprintf(stderr, "Grammar Error at Line %d Column %d: ", yylloc.first_line,yylloc.first_column);
    vfprintf(stderr, fmt, ap);
    fprintf(stderr, ".\n");
}
